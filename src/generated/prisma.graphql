# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type ContextResolver implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Entity implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HasProperty implements Node {
  id: ID!
  sources: [EntityType!]
  targets(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HasResolver implements Node {
  id: ID!
  sources: [EntityType!]
  targets(where: ContextResolverWhereInput, orderBy: ContextResolverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContextResolver!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HasSource implements Node {
  id: ID!
  sources(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  targets: [EntityType!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HasTarget implements Node {
  id: ID!
  sources(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link!]
  targets: [EntityType!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Link implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

type Property implements Node {
  id: ID!
  key: String!
  value: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RefersTo implements Node {
  id: ID!
  source(where: SelectorWhereInput): Selector!
  targets(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Resource implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Selector implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
}


#
# Other Types
#

type AggregateContextResolver {
  count: Int!
}

type AggregateEntity {
  count: Int!
}

type AggregateHasProperty {
  count: Int!
}

type AggregateHasResolver {
  count: Int!
}

type AggregateHasSource {
  count: Int!
}

type AggregateHasTarget {
  count: Int!
}

type AggregateLink {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProperty {
  count: Int!
}

type AggregateRefersTo {
  count: Int!
}

type AggregateResource {
  count: Int!
}

type AggregateSelector {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type ContextResolverConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ContextResolverEdge]!
  aggregate: AggregateContextResolver!
}

input ContextResolverCreateManyInput {
  connect: [ContextResolverWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type ContextResolverEdge {
  """
  The item at the end of the edge.
  """
  node: ContextResolver!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ContextResolverOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ContextResolverPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ContextResolverSubscriptionPayload {
  mutation: MutationType!
  node: ContextResolver
  updatedFields: [String!]
  previousValues: ContextResolverPreviousValues
}

input ContextResolverSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ContextResolverSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ContextResolverSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ContextResolverWhereInput
}

input ContextResolverUpdateManyInput {
  connect: [ContextResolverWhereUniqueInput!]
  disconnect: [ContextResolverWhereUniqueInput!]
  delete: [ContextResolverWhereUniqueInput!]
}

input ContextResolverWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ContextResolverWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ContextResolverWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input ContextResolverWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
A connection to a list of items.
"""
type EntityConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [EntityEdge]!
  aggregate: AggregateEntity!
}

"""
An edge in a connection.
"""
type EntityEdge {
  """
  The item at the end of the edge.
  """
  node: Entity!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum EntityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EntityPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type EntitySubscriptionPayload {
  mutation: MutationType!
  node: Entity
  updatedFields: [String!]
  previousValues: EntityPreviousValues
}

input EntitySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EntitySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [EntitySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityWhereInput
}

enum EntityType {
  Resource
  Selector
  Link
}

input EntityWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [EntityWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [EntityWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input EntityWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type HasPropertyConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [HasPropertyEdge]!
  aggregate: AggregateHasProperty!
}

input HasPropertyCreateInput {
  sources: HasPropertyCreatesourcesInput
  targets: PropertyCreateManyInput
}

input HasPropertyCreatesourcesInput {
  set: [EntityType!]
}

"""
An edge in a connection.
"""
type HasPropertyEdge {
  """
  The item at the end of the edge.
  """
  node: HasProperty!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum HasPropertyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HasPropertyPreviousValues {
  id: ID!
  sources: [EntityType!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HasPropertySubscriptionPayload {
  mutation: MutationType!
  node: HasProperty
  updatedFields: [String!]
  previousValues: HasPropertyPreviousValues
}

input HasPropertySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HasPropertySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [HasPropertySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HasPropertyWhereInput
}

input HasPropertyUpdateInput {
  sources: HasPropertyUpdatesourcesInput
  targets: PropertyUpdateManyInput
}

input HasPropertyUpdatesourcesInput {
  set: [EntityType!]
}

input HasPropertyWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HasPropertyWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [HasPropertyWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  targets_every: PropertyWhereInput
  targets_some: PropertyWhereInput
  targets_none: PropertyWhereInput
}

input HasPropertyWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type HasResolverConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [HasResolverEdge]!
  aggregate: AggregateHasResolver!
}

input HasResolverCreateInput {
  sources: HasResolverCreatesourcesInput
  targets: ContextResolverCreateManyInput
}

input HasResolverCreatesourcesInput {
  set: [EntityType!]
}

"""
An edge in a connection.
"""
type HasResolverEdge {
  """
  The item at the end of the edge.
  """
  node: HasResolver!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum HasResolverOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HasResolverPreviousValues {
  id: ID!
  sources: [EntityType!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HasResolverSubscriptionPayload {
  mutation: MutationType!
  node: HasResolver
  updatedFields: [String!]
  previousValues: HasResolverPreviousValues
}

input HasResolverSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HasResolverSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [HasResolverSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HasResolverWhereInput
}

input HasResolverUpdateInput {
  sources: HasResolverUpdatesourcesInput
  targets: ContextResolverUpdateManyInput
}

input HasResolverUpdatesourcesInput {
  set: [EntityType!]
}

input HasResolverWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HasResolverWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [HasResolverWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  targets_every: ContextResolverWhereInput
  targets_some: ContextResolverWhereInput
  targets_none: ContextResolverWhereInput
}

input HasResolverWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type HasSourceConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [HasSourceEdge]!
  aggregate: AggregateHasSource!
}

input HasSourceCreateInput {
  targets: HasSourceCreatetargetsInput
  sources: LinkCreateManyInput
}

input HasSourceCreatetargetsInput {
  set: [EntityType!]
}

"""
An edge in a connection.
"""
type HasSourceEdge {
  """
  The item at the end of the edge.
  """
  node: HasSource!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum HasSourceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HasSourcePreviousValues {
  id: ID!
  targets: [EntityType!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HasSourceSubscriptionPayload {
  mutation: MutationType!
  node: HasSource
  updatedFields: [String!]
  previousValues: HasSourcePreviousValues
}

input HasSourceSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HasSourceSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [HasSourceSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HasSourceWhereInput
}

input HasSourceUpdateInput {
  targets: HasSourceUpdatetargetsInput
  sources: LinkUpdateManyInput
}

input HasSourceUpdatetargetsInput {
  set: [EntityType!]
}

input HasSourceWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HasSourceWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [HasSourceWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  sources_every: LinkWhereInput
  sources_some: LinkWhereInput
  sources_none: LinkWhereInput
}

input HasSourceWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type HasTargetConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [HasTargetEdge]!
  aggregate: AggregateHasTarget!
}

input HasTargetCreateInput {
  targets: HasTargetCreatetargetsInput
  sources: LinkCreateManyInput
}

input HasTargetCreatetargetsInput {
  set: [EntityType!]
}

"""
An edge in a connection.
"""
type HasTargetEdge {
  """
  The item at the end of the edge.
  """
  node: HasTarget!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum HasTargetOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HasTargetPreviousValues {
  id: ID!
  targets: [EntityType!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

type HasTargetSubscriptionPayload {
  mutation: MutationType!
  node: HasTarget
  updatedFields: [String!]
  previousValues: HasTargetPreviousValues
}

input HasTargetSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HasTargetSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [HasTargetSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: HasTargetWhereInput
}

input HasTargetUpdateInput {
  targets: HasTargetUpdatetargetsInput
  sources: LinkUpdateManyInput
}

input HasTargetUpdatetargetsInput {
  set: [EntityType!]
}

input HasTargetWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [HasTargetWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [HasTargetWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  sources_every: LinkWhereInput
  sources_some: LinkWhereInput
  sources_none: LinkWhereInput
}

input HasTargetWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type LinkConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [LinkEdge]!
  aggregate: AggregateLink!
}

input LinkCreateManyInput {
  connect: [LinkWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type LinkEdge {
  """
  The item at the end of the edge.
  """
  node: Link!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum LinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LinkPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type LinkSubscriptionPayload {
  mutation: MutationType!
  node: Link
  updatedFields: [String!]
  previousValues: LinkPreviousValues
}

input LinkSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LinkSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LinkSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LinkWhereInput
}

input LinkUpdateManyInput {
  connect: [LinkWhereUniqueInput!]
  disconnect: [LinkWhereUniqueInput!]
  delete: [LinkWhereUniqueInput!]
}

input LinkWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [LinkWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [LinkWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input LinkWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createEntity: Entity!
  createResource: Resource!
  createSelector: Selector!
  createLink: Link!
  createProperty(data: PropertyCreateInput!): Property!
  createContextResolver: ContextResolver!
  createHasProperty(data: HasPropertyCreateInput!): HasProperty!
  createHasResolver(data: HasResolverCreateInput!): HasResolver!
  createHasSource(data: HasSourceCreateInput!): HasSource!
  createHasTarget(data: HasTargetCreateInput!): HasTarget!
  createRefersTo(data: RefersToCreateInput!): RefersTo!
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  updateProperty(data: PropertyUpdateInput!, where: PropertyWhereUniqueInput!): Property
  updateHasProperty(data: HasPropertyUpdateInput!, where: HasPropertyWhereUniqueInput!): HasProperty
  updateHasResolver(data: HasResolverUpdateInput!, where: HasResolverWhereUniqueInput!): HasResolver
  updateHasSource(data: HasSourceUpdateInput!, where: HasSourceWhereUniqueInput!): HasSource
  updateHasTarget(data: HasTargetUpdateInput!, where: HasTargetWhereUniqueInput!): HasTarget
  updateRefersTo(data: RefersToUpdateInput!, where: RefersToWhereUniqueInput!): RefersTo
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEntity(where: EntityWhereUniqueInput!): Entity
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteSelector(where: SelectorWhereUniqueInput!): Selector
  deleteLink(where: LinkWhereUniqueInput!): Link
  deleteProperty(where: PropertyWhereUniqueInput!): Property
  deleteContextResolver(where: ContextResolverWhereUniqueInput!): ContextResolver
  deleteHasProperty(where: HasPropertyWhereUniqueInput!): HasProperty
  deleteHasResolver(where: HasResolverWhereUniqueInput!): HasResolver
  deleteHasSource(where: HasSourceWhereUniqueInput!): HasSource
  deleteHasTarget(where: HasTargetWhereUniqueInput!): HasTarget
  deleteRefersTo(where: RefersToWhereUniqueInput!): RefersTo
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  upsertProperty(where: PropertyWhereUniqueInput!, create: PropertyCreateInput!, update: PropertyUpdateInput!): Property!
  upsertHasProperty(where: HasPropertyWhereUniqueInput!, create: HasPropertyCreateInput!, update: HasPropertyUpdateInput!): HasProperty!
  upsertHasResolver(where: HasResolverWhereUniqueInput!, create: HasResolverCreateInput!, update: HasResolverUpdateInput!): HasResolver!
  upsertHasSource(where: HasSourceWhereUniqueInput!, create: HasSourceCreateInput!, update: HasSourceUpdateInput!): HasSource!
  upsertHasTarget(where: HasTargetWhereUniqueInput!, create: HasTargetCreateInput!, update: HasTargetUpdateInput!): HasTarget!
  upsertRefersTo(where: RefersToWhereUniqueInput!, create: RefersToCreateInput!, update: RefersToUpdateInput!): RefersTo!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyProperties(data: PropertyUpdateInput!, where: PropertyWhereInput!): BatchPayload!
  updateManyHasProperties(data: HasPropertyUpdateInput!, where: HasPropertyWhereInput!): BatchPayload!
  updateManyHasResolvers(data: HasResolverUpdateInput!, where: HasResolverWhereInput!): BatchPayload!
  updateManyHasSources(data: HasSourceUpdateInput!, where: HasSourceWhereInput!): BatchPayload!
  updateManyHasTargets(data: HasTargetUpdateInput!, where: HasTargetWhereInput!): BatchPayload!
  updateManyRefersToes(data: RefersToUpdateInput!, where: RefersToWhereInput!): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyEntities(where: EntityWhereInput!): BatchPayload!
  deleteManyResources(where: ResourceWhereInput!): BatchPayload!
  deleteManySelectors(where: SelectorWhereInput!): BatchPayload!
  deleteManyLinks(where: LinkWhereInput!): BatchPayload!
  deleteManyProperties(where: PropertyWhereInput!): BatchPayload!
  deleteManyContextResolvers(where: ContextResolverWhereInput!): BatchPayload!
  deleteManyHasProperties(where: HasPropertyWhereInput!): BatchPayload!
  deleteManyHasResolvers(where: HasResolverWhereInput!): BatchPayload!
  deleteManyHasSources(where: HasSourceWhereInput!): BatchPayload!
  deleteManyHasTargets(where: HasTargetWhereInput!): BatchPayload!
  deleteManyRefersToes(where: RefersToWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
A connection to a list of items.
"""
type PostConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneWithoutPostsInput!
}

input PostCreateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  isPublished: Boolean
  title: String!
  text: String!
}

"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateWithoutAuthorDataInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PostWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PostWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  isPublished: Boolean
  """
  All values that are not equal to given value.
  """
  isPublished_not: Boolean
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type PropertyConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [PropertyEdge]!
  aggregate: AggregateProperty!
}

input PropertyCreateInput {
  key: String!
  value: String!
}

input PropertyCreateManyInput {
  create: [PropertyCreateInput!]
  connect: [PropertyWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type PropertyEdge {
  """
  The item at the end of the edge.
  """
  node: Property!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum PropertyOrderByInput {
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  value_ASC
  value_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PropertyPreviousValues {
  id: ID!
  key: String!
  value: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PropertySubscriptionPayload {
  mutation: MutationType!
  node: Property
  updatedFields: [String!]
  previousValues: PropertyPreviousValues
}

input PropertySubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PropertySubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PropertySubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PropertyWhereInput
}

input PropertyUpdateDataInput {
  key: String
  value: String
}

input PropertyUpdateInput {
  key: String
  value: String
}

input PropertyUpdateManyInput {
  create: [PropertyCreateInput!]
  connect: [PropertyWhereUniqueInput!]
  disconnect: [PropertyWhereUniqueInput!]
  delete: [PropertyWhereUniqueInput!]
  update: [PropertyUpdateWithWhereUniqueNestedInput!]
  upsert: [PropertyUpsertWithWhereUniqueNestedInput!]
}

input PropertyUpdateWithWhereUniqueNestedInput {
  where: PropertyWhereUniqueInput!
  data: PropertyUpdateDataInput!
}

input PropertyUpsertWithWhereUniqueNestedInput {
  where: PropertyWhereUniqueInput!
  update: PropertyUpdateDataInput!
  create: PropertyCreateInput!
}

input PropertyWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [PropertyWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [PropertyWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  key: String
  """
  All values that are not equal to given value.
  """
  key_not: String
  """
  All values that are contained in given list.
  """
  key_in: [String!]
  """
  All values that are not contained in given list.
  """
  key_not_in: [String!]
  """
  All values less than the given value.
  """
  key_lt: String
  """
  All values less than or equal the given value.
  """
  key_lte: String
  """
  All values greater than the given value.
  """
  key_gt: String
  """
  All values greater than or equal the given value.
  """
  key_gte: String
  """
  All values containing the given string.
  """
  key_contains: String
  """
  All values not containing the given string.
  """
  key_not_contains: String
  """
  All values starting with the given string.
  """
  key_starts_with: String
  """
  All values not starting with the given string.
  """
  key_not_starts_with: String
  """
  All values ending with the given string.
  """
  key_ends_with: String
  """
  All values not ending with the given string.
  """
  key_not_ends_with: String
  value: String
  """
  All values that are not equal to given value.
  """
  value_not: String
  """
  All values that are contained in given list.
  """
  value_in: [String!]
  """
  All values that are not contained in given list.
  """
  value_not_in: [String!]
  """
  All values less than the given value.
  """
  value_lt: String
  """
  All values less than or equal the given value.
  """
  value_lte: String
  """
  All values greater than the given value.
  """
  value_gt: String
  """
  All values greater than or equal the given value.
  """
  value_gte: String
  """
  All values containing the given string.
  """
  value_contains: String
  """
  All values not containing the given string.
  """
  value_not_contains: String
  """
  All values starting with the given string.
  """
  value_starts_with: String
  """
  All values not starting with the given string.
  """
  value_not_starts_with: String
  """
  All values ending with the given string.
  """
  value_ends_with: String
  """
  All values not ending with the given string.
  """
  value_not_ends_with: String
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input PropertyWhereUniqueInput {
  id: ID
}

type Query {
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entity]!
  resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource]!
  selectors(where: SelectorWhereInput, orderBy: SelectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Selector]!
  links(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Link]!
  properties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property]!
  contextResolvers(where: ContextResolverWhereInput, orderBy: ContextResolverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ContextResolver]!
  hasProperties(where: HasPropertyWhereInput, orderBy: HasPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HasProperty]!
  hasResolvers(where: HasResolverWhereInput, orderBy: HasResolverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HasResolver]!
  hasSources(where: HasSourceWhereInput, orderBy: HasSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HasSource]!
  hasTargets(where: HasTargetWhereInput, orderBy: HasTargetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HasTarget]!
  refersToes(where: RefersToWhereInput, orderBy: RefersToOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RefersTo]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  entity(where: EntityWhereUniqueInput!): Entity
  resource(where: ResourceWhereUniqueInput!): Resource
  selector(where: SelectorWhereUniqueInput!): Selector
  link(where: LinkWhereUniqueInput!): Link
  property(where: PropertyWhereUniqueInput!): Property
  contextResolver(where: ContextResolverWhereUniqueInput!): ContextResolver
  hasProperty(where: HasPropertyWhereUniqueInput!): HasProperty
  hasResolver(where: HasResolverWhereUniqueInput!): HasResolver
  hasSource(where: HasSourceWhereUniqueInput!): HasSource
  hasTarget(where: HasTargetWhereUniqueInput!): HasTarget
  refersTo(where: RefersToWhereUniqueInput!): RefersTo
  post(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  entitiesConnection(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityConnection!
  resourcesConnection(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResourceConnection!
  selectorsConnection(where: SelectorWhereInput, orderBy: SelectorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SelectorConnection!
  linksConnection(where: LinkWhereInput, orderBy: LinkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LinkConnection!
  propertiesConnection(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertyConnection!
  contextResolversConnection(where: ContextResolverWhereInput, orderBy: ContextResolverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContextResolverConnection!
  hasPropertiesConnection(where: HasPropertyWhereInput, orderBy: HasPropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HasPropertyConnection!
  hasResolversConnection(where: HasResolverWhereInput, orderBy: HasResolverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HasResolverConnection!
  hasSourcesConnection(where: HasSourceWhereInput, orderBy: HasSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HasSourceConnection!
  hasTargetsConnection(where: HasTargetWhereInput, orderBy: HasTargetOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HasTargetConnection!
  refersToesConnection(where: RefersToWhereInput, orderBy: RefersToOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RefersToConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type RefersToConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [RefersToEdge]!
  aggregate: AggregateRefersTo!
}

input RefersToCreateInput {
  source: SelectorCreateOneInput!
  targets: ResourceCreateManyInput
}

"""
An edge in a connection.
"""
type RefersToEdge {
  """
  The item at the end of the edge.
  """
  node: RefersTo!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum RefersToOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RefersToPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RefersToSubscriptionPayload {
  mutation: MutationType!
  node: RefersTo
  updatedFields: [String!]
  previousValues: RefersToPreviousValues
}

input RefersToSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RefersToSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RefersToSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RefersToWhereInput
}

input RefersToUpdateInput {
  source: SelectorUpdateOneInput
  targets: ResourceUpdateManyInput
}

input RefersToWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [RefersToWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [RefersToWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
  source: SelectorWhereInput
  targets_every: ResourceWhereInput
  targets_some: ResourceWhereInput
  targets_none: ResourceWhereInput
}

input RefersToWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type ResourceConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ResourceEdge]!
  aggregate: AggregateResource!
}

input ResourceCreateManyInput {
  connect: [ResourceWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type ResourceEdge {
  """
  The item at the end of the edge.
  """
  node: Resource!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ResourceOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ResourcePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ResourceSubscriptionPayload {
  mutation: MutationType!
  node: Resource
  updatedFields: [String!]
  previousValues: ResourcePreviousValues
}

input ResourceSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ResourceSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ResourceSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ResourceWhereInput
}

input ResourceUpdateManyInput {
  connect: [ResourceWhereUniqueInput!]
  disconnect: [ResourceWhereUniqueInput!]
  delete: [ResourceWhereUniqueInput!]
}

input ResourceWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ResourceWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ResourceWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input ResourceWhereUniqueInput {
  id: ID
}

"""
A connection to a list of items.
"""
type SelectorConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [SelectorEdge]!
  aggregate: AggregateSelector!
}

input SelectorCreateOneInput {
  connect: SelectorWhereUniqueInput
}

"""
An edge in a connection.
"""
type SelectorEdge {
  """
  The item at the end of the edge.
  """
  node: Selector!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum SelectorOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SelectorPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SelectorSubscriptionPayload {
  mutation: MutationType!
  node: Selector
  updatedFields: [String!]
  previousValues: SelectorPreviousValues
}

input SelectorSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SelectorSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SelectorSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SelectorWhereInput
}

input SelectorUpdateOneInput {
  connect: SelectorWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}

input SelectorWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [SelectorWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [SelectorWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  updatedAt: DateTime
  """
  All values that are not equal to given value.
  """
  updatedAt_not: DateTime
  """
  All values that are contained in given list.
  """
  updatedAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  updatedAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  updatedAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  updatedAt_lte: DateTime
  """
  All values greater than the given value.
  """
  updatedAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  updatedAt_gte: DateTime
}

input SelectorWhereUniqueInput {
  id: ID
}

type Subscription {
  entity(where: EntitySubscriptionWhereInput): EntitySubscriptionPayload
  resource(where: ResourceSubscriptionWhereInput): ResourceSubscriptionPayload
  selector(where: SelectorSubscriptionWhereInput): SelectorSubscriptionPayload
  link(where: LinkSubscriptionWhereInput): LinkSubscriptionPayload
  property(where: PropertySubscriptionWhereInput): PropertySubscriptionPayload
  contextResolver(where: ContextResolverSubscriptionWhereInput): ContextResolverSubscriptionPayload
  hasProperty(where: HasPropertySubscriptionWhereInput): HasPropertySubscriptionPayload
  hasResolver(where: HasResolverSubscriptionWhereInput): HasResolverSubscriptionPayload
  hasSource(where: HasSourceSubscriptionWhereInput): HasSourceSubscriptionPayload
  hasTarget(where: HasTargetSubscriptionWhereInput): HasTargetSubscriptionPayload
  refersTo(where: RefersToSubscriptionWhereInput): RefersToSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  email: String!
  password: String!
  name: String!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  email: String
  password: String
  name: String
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  email: String
  """
  All values that are not equal to given value.
  """
  email_not: String
  """
  All values that are contained in given list.
  """
  email_in: [String!]
  """
  All values that are not contained in given list.
  """
  email_not_in: [String!]
  """
  All values less than the given value.
  """
  email_lt: String
  """
  All values less than or equal the given value.
  """
  email_lte: String
  """
  All values greater than the given value.
  """
  email_gt: String
  """
  All values greater than or equal the given value.
  """
  email_gte: String
  """
  All values containing the given string.
  """
  email_contains: String
  """
  All values not containing the given string.
  """
  email_not_contains: String
  """
  All values starting with the given string.
  """
  email_starts_with: String
  """
  All values not starting with the given string.
  """
  email_not_starts_with: String
  """
  All values ending with the given string.
  """
  email_ends_with: String
  """
  All values not ending with the given string.
  """
  email_not_ends_with: String
  password: String
  """
  All values that are not equal to given value.
  """
  password_not: String
  """
  All values that are contained in given list.
  """
  password_in: [String!]
  """
  All values that are not contained in given list.
  """
  password_not_in: [String!]
  """
  All values less than the given value.
  """
  password_lt: String
  """
  All values less than or equal the given value.
  """
  password_lte: String
  """
  All values greater than the given value.
  """
  password_gt: String
  """
  All values greater than or equal the given value.
  """
  password_gte: String
  """
  All values containing the given string.
  """
  password_contains: String
  """
  All values not containing the given string.
  """
  password_not_contains: String
  """
  All values starting with the given string.
  """
  password_starts_with: String
  """
  All values not starting with the given string.
  """
  password_not_starts_with: String
  """
  All values ending with the given string.
  """
  password_ends_with: String
  """
  All values not ending with the given string.
  """
  password_not_ends_with: String
  name: String
  """
  All values that are not equal to given value.
  """
  name_not: String
  """
  All values that are contained in given list.
  """
  name_in: [String!]
  """
  All values that are not contained in given list.
  """
  name_not_in: [String!]
  """
  All values less than the given value.
  """
  name_lt: String
  """
  All values less than or equal the given value.
  """
  name_lte: String
  """
  All values greater than the given value.
  """
  name_gt: String
  """
  All values greater than or equal the given value.
  """
  name_gte: String
  """
  All values containing the given string.
  """
  name_contains: String
  """
  All values not containing the given string.
  """
  name_not_contains: String
  """
  All values starting with the given string.
  """
  name_starts_with: String
  """
  All values not starting with the given string.
  """
  name_not_starts_with: String
  """
  All values ending with the given string.
  """
  name_ends_with: String
  """
  All values not ending with the given string.
  """
  name_not_ends_with: String
  posts_every: PostWhereInput
  posts_some: PostWhereInput
  posts_none: PostWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
